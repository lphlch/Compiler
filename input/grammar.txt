statement_list->statement_list statement | empty
statement->ID = NUM ;
empty->E
##
ID
=
NUM
E
;
##

program->declaration_list #
declaration_list->declaration_list declaration | declaration
declaration->var_declaration | fun_declaration
var_declaration->type_specifier ID | type_specifier ID = NUM ;
type_specifier->INT | VOID | DOUBLE
fun_declaration->type_specifier ID ( params ) compound_stmt
params->param_list | VOID
param_list->param_list , param | param
param->type_specifier ID
compound_stmt->{ local_declarations statement_list }
local_declarations->var_declaration local_declarations | empty
statement_list->statement statement_list | empty
statement->expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt
expression_stmt->expression ; | ;
selection_stmt->IF ( expression ) { local_declarations statement_list } | IF ( expression ) { local_declarations statement_list } ELSE { local_declarations statement_list }
iteration_stmt->WHILE ( expression ) statement
return_stmt->RETURN ; | RETURN expression ;
expression->var = expression | simple_expression
var->ID
simple_expression->additive_expression | simple_expression RELOP additive_expression
additive_expression->term | additive_expression ADDOP term
term->factor | term MULOP factor
factor->( expression ) | var | call | NUM
call->ID ( args )
args->arg_list | empty
arg_list->arg_list , expression | expression
empty->E
##
ID
INT
VOID
DOUBLE
(
)
;
=
,
{
}
IF
ELSE
WHILE
RETURN
RELOP
ADDOP
MULOP
NUM
E
#
##







E->T G
G->+ T G | - T G | ε
T->F S
S->* F S | / F S | ε
F->( E ) | i
##
+
-
*
/
(
)
i
ε
##
